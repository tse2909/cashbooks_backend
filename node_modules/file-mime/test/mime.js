'use strict';

var assert = require('assert'),
  mime = require('..');

describe('mime', function () {

  describe('find', function () {

    it('should find the MIME type of json', function () {
      assert.strictEqual('application/json', mime.type('json'));
      assert.strictEqual('application/json', mime.find('json'));
      assert.strictEqual('application/json', mime.lookup('json'));
    });

    it('should return false on unknown extension', function () {
      assert.strictEqual(false, mime.type('foobar'));
    });
  });

  describe('extension', function () {

    it('should find the extension of application/json', function () {
      assert.strictEqual('json', mime.extension('application/json'));
    });

    it('should return false on unknown MIME type', function () {
      assert.strictEqual(false, mime.extension('foobar'));
    });
  });

  describe('define', function () {

    describe('defineOne', function () {

      it('should define a new MIME type', function () {
        assert.strictEqual(false, mime.type('foo1'));
        mime.defineOne('foo1', 'bar1');
        assert.strictEqual('bar1', mime.type('foo1'));
      });
    });

    describe('defineMore', function () {

      it('should define multiply MIME types', function () {
        assert.strictEqual(false, mime.type('foo2'));
        assert.strictEqual(false, mime.type('foo3'));
        mime.defineMore({
          'foo2': 'bar2',
          'foo3': 'bar3'
        });
        assert.strictEqual('bar2', mime.type('foo2'));
        assert.strictEqual('bar3', mime.type('foo3'));
      });
    });

    it('should define a new MIME type', function () {
      assert.strictEqual(false, mime.type('foo4'));
      mime.define('foo4', 'bar4');
      assert.strictEqual('bar4', mime.type('foo4'));
    });

    it('should define multiply MIME types', function () {
      assert.strictEqual(false, mime.type('foo5'));
      assert.strictEqual(false, mime.type('foo6'));
      mime.defineMore({
        'foo5': 'bar5',
        'foo6': 'bar6'
      });
      assert.strictEqual('bar5', mime.type('foo5'));
      assert.strictEqual('bar6', mime.type('foo6'));
    });
  });
});
