'use strict';

/**
 * Basic MIME type mapping module.
 * @module file-mime
 */
var mime = exports;

/**
 * Extension - MIME type dictionary.
 * @type {Object}
 * @api private
 */
mime.types = require('./types');

/**
 * Extension cache.
 * @type {Object}
 */
mime.extensionCache = {};

/**
 * Defines a new MIME type.
 * @param {String} extension
 * @param {String} type
 * @returns {Object} self
 * @api public
 */
mime.defineOne = function (extension, type) {
  this.types[extension.toLowerCase()] = type;
  return this;
};

/**
 * Defines multiple MIME types.
 * @param {Object} types
 * @returns {Object} self
 */
mime.defineMore = function (types) {
  var extension;
  for (extension in types) {
    if (types.hasOwnProperty(extension)) {
      this.defineOne(extension, types[extension]);
    }
  }
  return this;
};

/**
 * Defines a new MIME type or muliply MIME types.
 * @param {String} extension
 * @param {String} type
 * @returns {Object} self
 * @api public
 */
mime.define = function (extension, type) {
  if (arguments.length === 2) {
    return this.defineOne(extension, type);
  }
  if (arguments.length === 1) {
    return this.defineMore(extension);
  }
  return this;
};

/**
 * Finds a MIME type by extension.
 * @param {String} extension
 * @returns {String|Boolean}
 * @api public
 */
mime.type = function (extension) {
  return this.types[extension.toLowerCase()] || false;
};

// synonyms to mime.type
mime.find = mime.type;
mime.lookup = mime.type;

/**
 * Finds an extension by MIME type.
 * @param {String} type
 * @returns {String|Boolean}
 * @api public
 */
mime.extension = function (type) {
  var extension;
  type = type.toLowerCase();
  if (this.extensionCache[type] === undefined) {
    this.extensionCache[type] = false;
    for (extension in this.types) {
      if (this.types.hasOwnProperty(extension)
          && type === this.types[extension]) {
        this.extensionCache[type] = extension;
      }
    }
  }
  return this.extensionCache[type];
};
